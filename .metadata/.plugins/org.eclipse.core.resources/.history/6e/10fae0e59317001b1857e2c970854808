package junit.punam;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.condition.EnabledOnOs;
import org.junit.jupiter.api.condition.OS;

//@TestInstance(Lifecycle.PER_CLASS)
class MathUtilsTest {

	MathUtils mathUtils;
	
	@BeforeAll
	static void beforeAll() {
		System.out.println("This should run before all methods");
	}
	
	@BeforeEach
	void init() {
		mathUtils = new MathUtils();
	}
	
	@AfterEach
	void cleanup() {
		System.out.println("Cleaning up");
	}

	@Test
	void testAdd() {
		
		//MathUtils mathUtils = new MathUtils();
		int expected  = 2;
		int actual = mathUtils.add(1, 1);
		assertEquals(expected, actual);
	}
	
	@Test
	@DisplayName("Testing Subtract Method")
	void testSub() {
		
		//MathUtils mathUtils = new MathUtils();
		int expected  = 2;
		int actual = mathUtils.subtract(4, 2);
		assertEquals(expected, actual);
	}
	
	@Test
	@DisplayName("Testing Multiply Method")
	@Disabled
	void testMultiply() {
		
		//MathUtils mathUtils = new MathUtils();
		int expected  = 8;
		int actual = mathUtils.multiply(4,2);
		assertEquals(expected, actual);
	}
	
	@Test
	@EnabledOnOs(OS.LINUX)
	void testDivide() {
		//MathUtils mathUtils = new MathUtils();
		assertThrows(ArithmeticException.class, ()-> mathUtils.divide(1, 0) , "Divide by zero should throw");
	}
	
	@Test
	void testComputeCircleArea() {
		//MathUtils mathUtils = new MathUtils();
		assertEquals(314.1592653589793, mathUtils.computeCircleArea(10),"The method should compute correct circle area");
	}
	

}
